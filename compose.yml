services:
  postgres:
    # Using same postgres version as the one deployed on the cloud
    image: postgres:13.4
    container_name: postgres
    # PGUSER must be the same as POSTGRES_USER and must be 'postgres' to avoid
    # 'role not found error' on healthcheck. (There might be better solutions)
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: chat_room
    # Health check to ensure that postgres has correctly initialized
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
    # Persist postgres volume so docker-compose down doesn't delete it
    volumes:
      - db-data:/var/lib/postgresql/data
    # Expose postgres port on 5431 to enable local debugging
    ports:
      - "5431:5432"

  fastapi:
    env_file:
      - ./config/server.env
    image: "${FASTAPI_SERVICE_IMAGE:-chat-room}"
    build:
      context: .
      dockerfile: "${FASTAPI_SERVICE_DOCKERFILE:-Dockerfile.release}"
    container_name: fastapi
    restart: always
    environment:
      # The following parameters overwrite values from server.env file and shouldn't change
      DB_URI: "postgresql://postgres:postgres@postgres/chat_room"
      APP_NAME: "backend"
    networks:
      - default
    # This volume is used to map the files and folders on the host to the container
    # so if we change code on the host, code in the docker container will also be changed
    volumes:
      - ./application:/app/application
      - ./alembic:/app/alembic
      - ./tests:/app/tests
    # Will only start service when postgres send a 'service_healthy' signal
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${SERVER_PORT:-9000}:${SERVER_PORT:-9000}"


volumes:
  db-data:
    driver: local
